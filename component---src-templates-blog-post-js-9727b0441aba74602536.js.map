{"version":3,"file":"component---src-templates-blog-post-js-9727b0441aba74602536.js","mappings":"2LAkEA,UA3DyB,SAAC,GAAwB,IAAD,EAArBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAmBR,EAAnBQ,SAAUC,EAAST,EAATS,KAElB,OACE,gBAAC,IAAD,CAAYR,SAAUA,EAAUM,MAAOH,GACrC,gBAAC,IAAD,CACEG,MAAOL,EAAKQ,YAAYH,MACxBI,YAAaT,EAAKQ,YAAYC,aAAeT,EAAKU,UAEpD,2BACEC,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYd,EAAKQ,YAAYH,OAC1C,yBAAIL,EAAKQ,YAAYO,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQjB,EAAKkB,MACxCJ,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAD,QAGJ,uBAAKH,UAAU,iBACb,sBACEQ,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGlB,GACC,gBAAC,EAAAmB,KAAD,CAAMC,GAAIpB,EAASqB,OAAOC,KAAMC,IAAI,QAApC,KACKvB,EAASE,YAAYH,QAI9B,0BACGE,GACC,gBAAC,EAAAkB,KAAD,CAAMC,GAAInB,EAAKoB,OAAOC,KAAMC,IAAI,QAC7BtB,EAAKC,YAAYH,MADpB,Y,6ECrDDyB,E,KAAaC,QAAAA,IAAAA,WAAH,qDAAGA,CAAH,soCCkBVC,EAAM,WAAM,MAkBjBC,EAAM,WAjBCC,EAAAA,EAAAA,gBAAc,aAiBP/B,KAAKC,oBAAb,aAAG,EAAwB6B,OAEvC,OACE,gBAACH,EAAD,KACE,uBAAKnB,UAAU,OACb,0BAAKsB,MAAAA,OAAL,EAAKA,EAAQE,MACb,wBAAMxB,UAAU,aAAhB,KACA,0BAAKsB,MAAAA,OAAL,EAAKA,EAAQ5B","sources":["webpack://gatsby-starter-blog/./src/templates/blog-post.js","webpack://gatsby-starter-blog/./src/components/Bio/BioWrapper.tsx","webpack://gatsby-starter-blog/./src/components/Bio/Bio.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport { Bio } from \"../components/Bio\";\nimport { PageLayout } from \"../components/PageLayout\";\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <PageLayout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </PageLayout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n","import styled from \"styled-components\"\n\nexport const BioWrapper = styled.div`\n  height: calc(100vh - 36px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ::selection {\n    color: #fff;\n    background: #000;\n  }\n\n  .bio {\n    display: flex;\n  }\n\n  @keyframes appear1 {\n    from {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n\n    90% {\n      opacity: 0;\n      transform: translateY(-10px);\n    }\n\n    to {\n      opacity: 0;\n      transform: translateY(-10px);\n    }\n  }\n\n  @keyframes appear2 {\n    from {\n      opacity: 1;\n    }\n\n    85% {\n      opacity: 0;\n    }\n\n    to {\n      opacity: 0;\n    }\n  }\n\n  @keyframes appear3 {\n    from {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n\n    90% {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n\n    to {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n  }\n\n  .bio h1 {\n    font-size: 20px;\n    font-weight: 400;\n    line-height: 24px;\n    margin: 0;\n    animation: appear1 4s cubic-bezier(0.36, 0, 0.66, -0.56) reverse;\n  }\n\n  .bio .separator {\n    padding: 0 16px;\n    user-select: none;\n    animation: appear2 7s cubic-bezier(0.36, 0, 0.66, -0.56) reverse;\n  }\n\n  .bio h2 {\n    font-size: 20px;\n    font-weight: 400;\n    line-height: 24px;\n    color: #b0b0b0;\n    animation: appear3 4.1s cubic-bezier(0.36, 0, 0.66, -0.56) reverse;\n  }\n\n  @media screen and (max-width: 400px) {\n    .bio {\n      flex-direction: column;\n      text-align: center;\n    }\n\n    .bio h1 {\n      margin-bottom: 16px;\n    }\n\n    .bio h2 {\n      font-size: 14px;\n    }\n\n    .bio .separator {\n      display: none;\n    }\n  }\n\n  @media (prefers-color-scheme: dark) {\n    ::selection {\n      color: #000;\n      background: #fff;\n    }\n\n    .bio h1 {\n      color: #fff;\n    }\n\n    .bio h2 {\n      color: #8a8a8a;\n    }\n  }\n`\n","import * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport { BioWrapper } from \"./BioWrapper\"\n\ntype BioStaticQuery = {\n  site: {\n    siteMetadata: {\n      author: {\n        name: string\n        title: string\n        summary: string\n      }\n      social: {\n        twitter: string\n      }\n    }\n  }\n}\n\nexport const Bio = () => {\n  const data = useStaticQuery<BioStaticQuery>(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            title\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <BioWrapper>\n      <div className=\"bio\">\n        <h1>{author?.name}</h1>\n        <span className=\"separator\">·</span>\n        <h2>{author?.title}</h2>\n        {/* {author?.summary && (\n          <p className=\"summary\">{author?.summary || null}</p>\n        )} */}\n      </div>\n    </BioWrapper>\n  )\n}\n"],"names":["data","location","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","frontmatter","description","excerpt","className","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel","BioWrapper","styled","Bio","author","useStaticQuery","name"],"sourceRoot":""}