{"version":3,"file":"component---src-pages-index-tsx-2921a3d0e5b73ae6b8a5.js","mappings":"uLAGaA,E,KAAaC,QAAAA,IAAAA,WAAH,qDAAGA,CAAH,ojBCkBVC,EAAM,WAAM,MAiBjBC,EAAM,WAhBCC,EAAAA,EAAAA,gBAAc,cAgBPC,KAAKC,oBAAb,aAAG,EAAwBH,OAEvC,OACE,gBAACH,EAAD,KACE,uBAAKO,UAAU,OACb,0CACA,wBAAMA,UAAU,aAAhB,KACA,0BAAKJ,MAAAA,OAAL,EAAKA,EAAQK,U,8HChCfC,EAAa,CACjBC,KCZ6BT,EAAAA,QAAAA,GAAAA,WAAH,oEAAGA,CAAH,ooBDa1BU,KEb6BV,EAAAA,QAAAA,GAAAA,WAAH,qEAAGA,CAAH,wdFgBtBW,EAAYX,EAAAA,QAAAA,GAAAA,WAAH,0DAAGA,CAAH,uCAKTY,EAAkBZ,EAAAA,QAAAA,EAAAA,WAAH,gEAAGA,CAAH,qBAIRa,EAA4B,SAAC,GAAgB,IAAdC,EAAc,EAAdA,QACpCC,EAAQD,EAAQE,YAAYD,OAASD,EAAQG,OAAOC,KACpDC,EAAOL,EAAQE,YAAYG,MAAQ,OACnCC,EAAQN,EAAQE,YAAYI,MAC5BC,EAAYP,EAAQE,YAAYM,WAChCC,EAAcf,EAAWW,GAGXK,EAAAA,SAAc,WAChC,IAAMC,EAASX,EAAQE,YAAYS,QAAU,CAACX,EAAQE,YAAYI,OAC5DM,EAAaC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,QAIrD,OAHoBhB,EAAQE,YAAYS,OACpCX,EAAQE,YAAYS,OAAOC,GAC3BZ,EAAQE,YAAYI,QAEvB,CAACN,IAEJ,OACE,gBAACS,EAAD,KACE,uBAAKjB,UAAU,cACb,+BACE,0BACEyB,OAAQV,MAAAA,OAAF,EAAEA,EAAWW,UACnBC,MAAM,iCAER,uBAAKC,IAAKd,EAAMY,UAAWG,IAAI,cAGnC,2BACE7B,UAAU,eACV8B,WAAS,EACTC,SAAS,6BAET,8BACE,gBAAC1B,EAAD,KACGG,EAAQE,YAAYsB,KACnB,qBAAGC,KAAMzB,EAAQE,YAAYsB,KAAME,OAAO,UACxC,wBAAMC,SAAS,YAAY1B,IAG7B,gBAAC,EAAA2B,KAAD,CAAMC,GAAI7B,EAAQG,OAAOC,KAAMuB,SAAS,OACtC,wBAAMA,SAAS,YAAY1B,MAKnC,+BACE,gBAACH,EAAD,CACEgC,wBAAyB,CACvBC,OAAQ/B,EAAQE,YAAY8B,aAAehC,EAAQiC,SAErDN,SAAS,oBG3ERO,EAAYhD,EAAAA,QAAAA,GAAAA,WAAH,qDAAGA,CAAH,2KC6BtB,EAduD,SAAC,GAAuB,IAArBiD,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACxDC,EAAQF,EAAKG,kBAAkBC,MAErC,OACE,gBAACC,EAAA,EAAD,CAAYJ,SAAUA,GACpB,gBAAC,IAAD,CAAKnC,MAAM,sBACX,gBAACd,EAAA,EAAD,MACA,gBAAC+C,EAAD,KACGG,EAAMI,KAAI,SAAAC,GAAI,OAAI,gBAAC3C,EAAD,CAAM4C,IAAKD,EAAKvC,OAAOC,KAAMJ,QAAS0C","sources":["webpack://gatsby-starter-blog/./src/components/Bio/BioWrapper.tsx","webpack://gatsby-starter-blog/./src/components/Bio/Bio.tsx","webpack://gatsby-starter-blog/./src/components/Tiles/Tile.tsx","webpack://gatsby-starter-blog/./src/components/Tiles/TileFull.tsx","webpack://gatsby-starter-blog/./src/components/Tiles/TileHalf.tsx","webpack://gatsby-starter-blog/./src/components/Tiles/TilesGrid.tsx","webpack://gatsby-starter-blog/./src/pages/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\n\nexport const BioWrapper = styled.div`\n  height: calc(100vh - 36px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ::selection {\n    color: #fff;\n    background: #000;\n  }\n\n  .bio {\n    display: flex;\n  }\n\n  .bio h1 {\n    font-size: 24px;\n    margin: 0;\n    line-height: 1;\n  }\n\n  .bio .separator {\n    padding: 0 16px;\n    user-select: none;\n  }\n\n  .bio h2 {\n    font-size: 24px;\n    color: #b0b0b0;\n  }\n\n  @media screen and (max-width: 400px) {\n    .bio {\n      flex-direction: column;\n      text-align: center;\n    }\n\n    .bio h1 {\n      margin-bottom: 16px;\n    }\n\n    .bio h2 {\n      font-size: 14px;\n    }\n\n    .bio .separator {\n      display: none;\n    }\n  }\n\n  @media (prefers-color-scheme: dark) {\n    ::selection {\n      color: #000;\n      background: #fff;\n    }\n\n    .bio h1 {\n      color: #fff;\n    }\n\n    .bio h2 {\n      color: #8a8a8a;\n    }\n  }\n`;","import * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport { BioWrapper } from './BioWrapper';\n\n\ntype BioStaticQuery = {\n  site: {\n    siteMetadata: {\n      author: {\n        name: string;\n        summary: string;\n      };\n      social: {\n        twitter: string;\n      };\n    };\n  };\n};\n\n\nexport const Bio = () => {\n  const data = useStaticQuery<BioStaticQuery>(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `);\n\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <BioWrapper>\n      <div className=\"bio\">\n        <h1>web engineer</h1>\n        <span className=\"separator\">Â·</span>\n        <h2>{author?.name}</h2>\n        {/* {author?.summary && (\n          <p className=\"summary\">\n            {author?.summary || null}\n          </p>\n        )} */}\n      </div>\n    </BioWrapper>\n  )\n};\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport { Project } from \"../../types\"\n\nimport { TileFullWrapper } from \"./TileFull\"\nimport { TileHalfWrapper } from \"./TileHalf\"\n\nexport type TileProps = {\n  project: Project\n}\n\nconst tileBySize = {\n  full: TileFullWrapper,\n  half: TileHalfWrapper,\n}\n\nconst TileTitle = styled.h2`\n  margin-bottom: 8px;\n  font-size: 20px;\n`\n\nconst TileDescription = styled.p`\n  font-size: 15px;\n`\n\nexport const Tile: React.FC<TileProps> = ({ project }) => {\n  const title = project.frontmatter.title || project.fields.slug\n  const size = project.frontmatter.size || \"full\"\n  const image = project.frontmatter.image\n  const imageDark = project.frontmatter.image_dark\n  const TileWrapper = tileBySize[size]\n\n  // eslint-disable-next-line\n  const randomImage = React.useMemo(() => {\n    const images = project.frontmatter.images || [project.frontmatter.image]\n    const imageIndex = Math.floor(Math.random() * images.length)\n    const randomImage = project.frontmatter.images\n      ? project.frontmatter.images[imageIndex]\n      : project.frontmatter.image\n    return randomImage\n  }, [project])\n\n  return (\n    <TileWrapper>\n      <div className=\"tile-image\">\n        <picture>\n          <source\n            srcSet={imageDark?.publicURL}\n            media=\"(prefers-color-scheme: dark)\"\n          />\n          <img src={image.publicURL} alt=\"project\" />\n        </picture>\n      </div>\n      <article\n        className=\"tile-details\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <TileTitle>\n            {project.frontmatter.link ? (\n              <a href={project.frontmatter.link} target=\"_blank\">\n                <span itemProp=\"headline\">{title}</span>\n              </a>\n            ) : (\n              <Link to={project.fields.slug} itemProp=\"url\">\n                <span itemProp=\"headline\">{title}</span>\n              </Link>\n            )}\n          </TileTitle>\n        </header>\n        <section>\n          <TileDescription\n            dangerouslySetInnerHTML={{\n              __html: project.frontmatter.description || project.excerpt,\n            }}\n            itemProp=\"description\"\n          />\n        </section>\n      </article>\n    </TileWrapper>\n  )\n}\n","import styled from \"styled-components\"\n\nexport const TileFullWrapper = styled.li`\n  background-color: #fff;\n  grid-column: span 12;\n  border-radius: 18px;\n  overflow: hidden;\n\n  @media (prefers-color-scheme: dark) {\n    background-color: #1d1e20;\n  }\n\n  grid-column: span 8;\n  display: flex;\n\n  @media screen and (max-width: 400px) {\n    flex-direction: column;\n  }\n\n  @media screen and (max-width: 720px) {\n    grid-column: span 12;\n  }\n\n  .tile-image {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n\n    img,\n    picture {\n      font-size: 0;\n      max-width: 100%;\n      max-height: 100%;\n    }\n  }\n\n  .tile-details {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    justify-content: center;\n    padding: 30px 30px 30px 0px;\n  }\n\n  @media screen and (max-width: 720px) {\n    flex-direction: column;\n\n    .tile-image {\n      padding-bottom: 40px;\n    }\n\n    .tile-details {\n      padding: 0px 30px 30px 30px;\n    }\n  }\n`\n","import styled from \"styled-components\"\n\nexport const TileHalfWrapper = styled.li`\n  background-color: #fff;\n  grid-column: span 12;\n  border-radius: 18px;\n  overflow: hidden;\n\n  @media (prefers-color-scheme: dark) {\n    background-color: #1d1e20;\n  }\n\n  grid-column: span 4;\n  display: flex;\n  flex-direction: column;\n\n  @media screen and (max-width: 720px) {\n    grid-column: span 12;\n  }\n\n  .tile-image {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n\n    img,\n    picture {\n      font-size: 0;\n      width: auto;\n      max-width: 100%;\n      height: auto;\n    }\n  }\n\n  .tile-details {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    justify-content: center;\n    padding: 24px 30px;\n  }\n`\n","import styled from \"styled-components\";\n\n\nexport const TilesGrid = styled.ol`\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  grid-column-gap: 24px;\n  grid-row-gap: 24px;\n  padding: 0 24px;\n  display: grid;\n  grid-template-columns: repeat(12, minmax(0, 1fr));\n`;\n","import * as React from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\n\nimport { Bio } from \"../components/Bio\"\nimport { PageLayout } from \"../components/PageLayout\"\nimport Seo from \"../components/seo\"\n\nimport { Tile, TilesGrid } from \"../components/Tiles\"\nimport { Project } from \"../types\"\n\n\nexport type BlogIndexProps = {\n  allMarkdownRemark: {\n    nodes: Project[];\n  };\n}\n\n\nconst BlogIndex: React.FC<PageProps<BlogIndexProps>> = ({ data, location }) => {\n  const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <PageLayout location={location}>\n      <Seo title=\"gebeto | projects\" />\n      <Bio />\n      <TilesGrid>\n        {posts.map(post => <Tile key={post.fields.slug} project={post} />)}\n      </TilesGrid>\n    </PageLayout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___order], order: ASC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          link\n          size\n          image {\n            publicURL\n          }\n          image_dark {\n            publicURL\n          }\n          images {\n            publicURL\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["BioWrapper","styled","Bio","author","useStaticQuery","site","siteMetadata","className","name","tileBySize","full","half","TileTitle","TileDescription","Tile","project","title","frontmatter","fields","slug","size","image","imageDark","image_dark","TileWrapper","React","images","imageIndex","Math","floor","random","length","srcSet","publicURL","media","src","alt","itemScope","itemType","link","href","target","itemProp","Link","to","dangerouslySetInnerHTML","__html","description","excerpt","TilesGrid","data","location","posts","allMarkdownRemark","nodes","PageLayout","map","post","key"],"sourceRoot":""}